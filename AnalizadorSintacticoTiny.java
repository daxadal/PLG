
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu May 19 21:09:31 CEST 2016
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import abstree.*;
import abstree.expresiones.*;
import abstree.expresiones.Number;
import abstree.sentencias.*;
import abstree.tipos.*;
import java.util.LinkedList;
import java.util.Hashtable;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu May 19 21:09:31 CEST 2016
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\006" +
    "\004\000\002\006\002\000\002\004\005\000\002\005\014" +
    "\000\002\010\006\000\002\010\005\000\002\003\004\000" +
    "\002\011\004\000\002\011\002\000\002\013\004\000\002" +
    "\013\003\000\002\007\007\000\002\031\003\000\002\031" +
    "\003\000\002\031\005\000\002\012\006\000\002\012\007" +
    "\000\002\012\011\000\002\012\007\000\002\012\007\000" +
    "\002\012\011\000\002\032\010\000\002\032\007\000\002" +
    "\027\005\000\002\027\003\000\002\025\003\000\002\025" +
    "\005\000\002\030\005\000\002\030\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\005\000" +
    "\002\014\006\000\002\014\003\000\002\014\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\005\000\002\016" +
    "\003\000\002\017\004\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\022\005\000\002\022\003" +
    "\000\002\023\005\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\006\004\ufffe\006\006\001\002\000\006\004" +
    "\ufffe\006\006\001\002\000\004\002\213\001\002\000\004" +
    "\065\176\001\002\000\004\004\011\001\002\000\004\002" +
    "\001\001\002\000\022\013\ufff7\016\ufff7\021\ufff7\025\ufff7" +
    "\062\020\063\015\064\017\065\ufff7\001\002\000\004\065" +
    "\172\001\002\000\014\013\031\016\030\021\026\025\032" +
    "\065\025\001\002\000\004\005\024\001\002\000\004\065" +
    "\ufff2\001\002\000\024\011\ufff7\013\ufff7\016\ufff7\021\ufff7" +
    "\025\ufff7\062\020\063\015\064\017\065\ufff7\001\002\000" +
    "\004\061\021\001\002\000\004\065\ufff3\001\002\000\010" +
    "\062\020\063\015\064\017\001\002\000\004\065\ufff1\001" +
    "\002\000\016\011\ufff8\013\ufff8\016\ufff8\021\ufff8\025\ufff8" +
    "\065\ufff8\001\002\000\004\002\ufffd\001\002\000\054\014" +
    "\uffe6\017\uffe6\022\uffe6\027\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\056\uffe6\057\uffe6" +
    "\060\uffe6\001\002\000\004\065\025\001\002\000\024\005" +
    "\ufff5\012\ufff5\013\031\015\ufff5\016\030\020\ufff5\021\026" +
    "\025\032\065\025\001\002\000\022\030\040\032\051\040" +
    "\041\041\045\042\057\055\056\061\054\065\025\001\002" +
    "\000\022\030\040\032\051\040\041\041\045\042\057\055" +
    "\056\061\054\065\025\001\002\000\004\065\133\001\002" +
    "\000\012\005\ufff9\012\ufff9\015\ufff9\020\ufff9\001\002\000" +
    "\006\035\035\057\036\001\002\000\010\055\056\061\054" +
    "\065\025\001\002\000\022\030\040\032\051\040\041\041" +
    "\045\042\057\055\056\061\054\065\025\001\002\000\054" +
    "\014\uffc4\017\uffc4\022\uffc4\027\uffc4\034\uffc4\035\035\036" +
    "\uffc4\037\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\001\002\000\004\061\127\001\002\000\016" +
    "\040\041\041\045\042\057\055\056\061\054\065\025\001" +
    "\002\000\042\014\uffc6\017\uffc6\036\uffc6\037\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\056\uffc6\060\uffc6\001\002\000\042" +
    "\014\uffc8\017\uffc8\036\uffc8\037\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\116" +
    "\054\uffc8\056\uffc8\060\uffc8\001\002\000\040\014\uffca\017" +
    "\uffca\036\uffca\037\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\054\114\056\uffca\060" +
    "\uffca\001\002\000\016\014\uffd5\017\uffd5\036\uffd5\037\uffd5" +
    "\056\uffd5\060\uffd5\001\002\000\036\014\uffcd\017\uffcd\036" +
    "\uffcd\037\uffcd\043\102\044\111\045\103\046\104\047\106" +
    "\050\107\051\105\052\110\056\uffcd\060\uffcd\001\002\000" +
    "\016\014\uffd6\017\uffd6\036\uffd6\037\uffd6\056\uffd6\060\uffd6" +
    "\001\002\000\016\014\uffd8\017\uffd8\036\uffd8\037\uffd8\056" +
    "\uffd8\060\uffd8\001\002\000\012\032\070\041\072\042\074" +
    "\061\067\001\002\000\016\014\uffda\017\uffda\036\uffda\037" +
    "\065\056\uffda\060\uffda\001\002\000\014\014\uffdd\017\uffdd" +
    "\036\063\056\uffdd\060\uffdd\001\002\000\054\014\uffc5\017" +
    "\uffc5\022\uffc5\027\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\001\002\000\004\060\062\001\002\000\022\030\040\032" +
    "\051\040\041\041\045\042\057\055\056\061\054\065\025" +
    "\001\002\000\016\014\uffd4\017\uffd4\036\uffd4\037\uffd4\056" +
    "\uffd4\060\uffd4\001\002\000\004\056\061\001\002\000\054" +
    "\014\uffc3\017\uffc3\022\uffc3\027\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\001\002\000\024\005\ufff0\012\ufff0\013\ufff0" +
    "\015\ufff0\016\ufff0\020\ufff0\021\ufff0\025\ufff0\065\ufff0\001" +
    "\002\000\016\040\041\041\045\042\057\055\056\061\054" +
    "\065\025\001\002\000\016\014\uffdb\017\uffdb\036\uffdb\037" +
    "\065\056\uffdb\060\uffdb\001\002\000\016\040\041\041\045" +
    "\042\057\055\056\061\054\065\025\001\002\000\016\014" +
    "\uffd9\017\uffd9\036\uffd9\037\uffd9\056\uffd9\060\uffd9\001\002" +
    "\000\006\033\uffe2\034\uffe2\001\002\000\012\032\070\041" +
    "\072\042\074\061\067\001\002\000\006\033\uffe3\034\076" +
    "\001\002\000\006\033\uffe1\034\uffe1\001\002\000\004\033" +
    "\075\001\002\000\006\033\uffe0\034\uffe0\001\002\000\012" +
    "\014\uffdc\017\uffdc\056\uffdc\060\uffdc\001\002\000\012\032" +
    "\070\041\072\042\074\061\067\001\002\000\004\033\uffe4" +
    "\001\002\000\004\033\101\001\002\000\006\033\uffdf\034" +
    "\uffdf\001\002\000\010\055\056\061\054\065\025\001\002" +
    "\000\010\055\056\061\054\065\025\001\002\000\010\055" +
    "\056\061\054\065\025\001\002\000\010\055\056\061\054" +
    "\065\025\001\002\000\010\055\056\061\054\065\025\001" +
    "\002\000\010\055\056\061\054\065\025\001\002\000\010" +
    "\055\056\061\054\065\025\001\002\000\010\055\056\061" +
    "\054\065\025\001\002\000\022\014\uffd2\017\uffd2\036\uffd2" +
    "\037\uffd2\051\105\052\110\056\uffd2\060\uffd2\001\002\000" +
    "\040\014\uffcb\017\uffcb\036\uffcb\037\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\054" +
    "\114\056\uffcb\060\uffcb\001\002\000\010\055\056\061\054" +
    "\065\025\001\002\000\042\014\uffc9\017\uffc9\036\uffc9\037" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\116\054\uffc9\056\uffc9\060\uffc9\001" +
    "\002\000\010\055\056\061\054\065\025\001\002\000\042" +
    "\014\uffc7\017\uffc7\036\uffc7\037\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\056\uffc7\060\uffc7\001\002\000\022\014\uffce\017" +
    "\uffce\036\uffce\037\uffce\051\105\052\110\056\uffce\060\uffce" +
    "\001\002\000\022\014\uffcf\017\uffcf\036\uffcf\037\uffcf\051" +
    "\105\052\110\056\uffcf\060\uffcf\001\002\000\040\014\uffcc" +
    "\017\uffcc\036\uffcc\037\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\054\114\056\uffcc" +
    "\060\uffcc\001\002\000\022\014\uffd0\017\uffd0\036\uffd0\037" +
    "\uffd0\051\105\052\110\056\uffd0\060\uffd0\001\002\000\022" +
    "\014\uffd1\017\uffd1\036\uffd1\037\uffd1\051\105\052\110\056" +
    "\uffd1\060\uffd1\001\002\000\022\014\uffd3\017\uffd3\036\uffd3" +
    "\037\uffd3\051\105\052\110\056\uffd3\060\uffd3\001\002\000" +
    "\016\014\uffd7\017\uffd7\036\uffd7\037\uffd7\056\uffd7\060\uffd7" +
    "\001\002\000\004\031\130\001\002\000\022\030\040\032" +
    "\051\040\041\041\045\042\057\055\056\061\054\065\025" +
    "\001\002\000\012\014\uffde\017\uffde\056\uffde\060\uffde\001" +
    "\002\000\054\014\uffe5\017\uffe5\022\uffe5\027\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\001\002\000\004\026\134\001" +
    "\002\000\004\065\025\001\002\000\004\027\141\001\002" +
    "\000\012\027\uffe7\034\137\035\035\060\uffe7\001\002\000" +
    "\004\065\025\001\002\000\006\027\uffe8\060\uffe8\001\002" +
    "\000\004\065\025\001\002\000\004\060\143\001\002\000" +
    "\024\005\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\020\uffeb" +
    "\021\uffeb\025\uffeb\065\uffeb\001\002\000\004\014\145\001" +
    "\002\000\022\013\ufff7\016\ufff7\021\ufff7\025\ufff7\062\020" +
    "\063\015\064\017\065\ufff7\001\002\000\006\015\147\020" +
    "\150\001\002\000\022\013\ufff7\016\ufff7\021\ufff7\025\ufff7" +
    "\062\020\063\015\064\017\065\ufff7\001\002\000\024\005" +
    "\uffef\012\uffef\013\uffef\015\uffef\016\uffef\020\uffef\021\uffef" +
    "\025\uffef\065\uffef\001\002\000\004\020\152\001\002\000" +
    "\024\005\uffee\012\uffee\013\uffee\015\uffee\016\uffee\020\uffee" +
    "\021\uffee\025\uffee\065\uffee\001\002\000\004\017\154\001" +
    "\002\000\022\013\ufff7\016\ufff7\021\ufff7\025\ufff7\062\020" +
    "\063\015\064\017\065\ufff7\001\002\000\004\020\156\001" +
    "\002\000\024\005\uffec\012\uffec\013\uffec\015\uffec\016\uffec" +
    "\020\uffec\021\uffec\025\uffec\065\uffec\001\002\000\012\005" +
    "\ufff6\012\ufff6\015\ufff6\020\ufff6\001\002\000\006\022\161" +
    "\035\035\001\002\000\004\023\162\001\002\000\004\061" +
    "\165\001\002\000\004\024\164\001\002\000\024\005\uffed" +
    "\012\uffed\013\uffed\015\uffed\016\uffed\020\uffed\021\uffed\025" +
    "\uffed\065\uffed\001\002\000\004\017\166\001\002\000\022" +
    "\013\ufff7\016\ufff7\021\ufff7\025\ufff7\062\020\063\015\064" +
    "\017\065\ufff7\001\002\000\004\020\170\001\002\000\006" +
    "\023\162\024\uffe9\001\002\000\004\024\uffea\001\002\000" +
    "\004\057\173\001\002\000\022\030\040\032\051\040\041" +
    "\041\045\042\057\055\056\061\054\065\025\001\002\000" +
    "\004\060\175\001\002\000\024\011\ufff4\013\ufff4\016\ufff4" +
    "\021\ufff4\025\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\001" +
    "\002\000\004\007\177\001\002\000\010\062\020\063\015" +
    "\064\017\001\002\000\004\065\210\001\002\000\004\010" +
    "\202\001\002\000\010\062\020\063\015\064\017\001\002" +
    "\000\012\011\ufff7\062\020\063\015\064\017\001\002\000" +
    "\004\011\205\001\002\000\022\013\ufff7\016\ufff7\021\ufff7" +
    "\025\ufff7\062\020\063\015\064\017\065\ufff7\001\002\000" +
    "\004\012\207\001\002\000\006\004\ufffc\006\ufffc\001\002" +
    "\000\004\060\211\001\002\000\012\010\ufffa\062\020\063" +
    "\015\064\017\001\002\000\004\010\ufffb\001\002\000\004" +
    "\002\000\001\002\000\004\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\010\002\004\005\003\006\006\001\001\000" +
    "\006\005\003\006\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\007\001\001\000\002\001\001\000" +
    "\012\003\013\007\015\011\012\031\011\001\001\000\002" +
    "\001\001\000\010\012\026\013\032\025\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\015\011\022" +
    "\031\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\157\001" +
    "\001\000\010\012\026\013\156\025\033\001\001\000\026" +
    "\014\152\015\052\016\051\017\047\020\046\021\045\022" +
    "\043\023\042\024\041\025\036\001\001\000\026\014\143" +
    "\015\052\016\051\017\047\020\046\021\045\022\043\023" +
    "\042\024\041\025\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\131\025\036\001" +
    "\001\000\026\014\054\015\052\016\051\017\047\020\046" +
    "\021\045\022\043\023\042\024\041\025\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\017\125\020\046" +
    "\021\045\022\043\023\042\024\041\025\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\070\030\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\057\015\052\016\051\017\047\020\046\021\045" +
    "\022\043\023\042\024\041\025\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\063\017\047\020\046\021\045\022\043\023" +
    "\042\024\041\025\036\001\001\000\002\001\001\000\020" +
    "\017\065\020\046\021\045\022\043\023\042\024\041\025" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\070\030\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\070\030\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\021\124\022\043" +
    "\023\042\024\041\025\036\001\001\000\014\021\123\022" +
    "\043\023\042\024\041\025\036\001\001\000\014\021\122" +
    "\022\043\023\042\024\041\025\036\001\001\000\012\022" +
    "\121\023\042\024\041\025\036\001\001\000\014\021\120" +
    "\022\043\023\042\024\041\025\036\001\001\000\014\021" +
    "\117\022\043\023\042\024\041\025\036\001\001\000\012" +
    "\022\112\023\042\024\041\025\036\001\001\000\014\021" +
    "\111\022\043\023\042\024\041\025\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\114\024\041\025" +
    "\036\001\001\000\002\001\001\000\006\024\116\025\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\130\015\052\016\051\017\047\020\046\021\045" +
    "\022\043\023\042\024\041\025\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\135" +
    "\027\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\135\027\137\001\001\000\002\001\001\000\006" +
    "\025\135\027\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\145\007\015\011\012" +
    "\031\011\001\001\000\002\001\001\000\012\003\150\007" +
    "\015\011\012\031\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\154\007\015\011\012\031\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\166\007" +
    "\015\011\012\031\011\001\001\000\002\001\001\000\004" +
    "\032\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\173\015\052\016\051\017\047\020\046\021\045" +
    "\022\043\023\042\024\041\025\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\200" +
    "\031\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\202\031\011\001\001\000\010\007\015\011\203" +
    "\031\011\001\001\000\002\001\001\000\012\003\205\007" +
    "\015\011\012\031\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\211\031\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Codigo ::= FunList Main 
            {
              Codigo RESULT =null;
		Location flxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location flxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		LinkedList<Funcion> fl = (LinkedList<Funcion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location mainxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location mainxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Programa main = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Codigo(main, fl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Codigo",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Codigo EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Codigo start_val = (Codigo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FunList ::= Funcion FunList 
            {
              LinkedList<Funcion> RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location flxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location flxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LinkedList<Funcion> fl = (LinkedList<Funcion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 fl.add(f); RESULT = fl; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FunList",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FunList ::= 
            {
              LinkedList<Funcion> RESULT =null;
		 RESULT = new LinkedList<Funcion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FunList",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= START Programa END 
            {
              Programa RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = p; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Funcion ::= METHOD ID INPUT Entrada OUTPUT Declaracion DeclList MAKES Programa RETURN 
            {
              Funcion RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Location entradaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).xleft;
		Location entradaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).xright;
		LinkedList<Declaracion> entrada = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).xright;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Location salidaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location salidaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		LinkedList<Declaracion> salida = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location progxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location progxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Programa prog = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 salida.add(d); 
											   RESULT = new Funcion(id, entrada,
											   				 salida, prog); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Funcion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Entrada ::= Tipo ID SEMICOLON Entrada 
            {
              LinkedList<Declaracion> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LinkedList<Declaracion> dl = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 dl.add(new Declaracion(t, id, null)); 
											   RESULT = dl; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Entrada ::= Tipo ID SEMICOLON 
            {
              LinkedList<Declaracion> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new LinkedList<Declaracion>(); 
				 							   RESULT.add(new Declaracion(t, id, null)); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Entrada",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Programa ::= DeclList SentList 
            {
              Programa RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		LinkedList<Declaracion> dl = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LinkedList<Sentencia> sl = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Programa(dl, sl); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclList ::= Declaracion DeclList 
            {
              LinkedList<Declaracion> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LinkedList<Declaracion> dl = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DeclList",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclList ::= 
            {
              LinkedList<Declaracion> RESULT =null;
		 RESULT = new LinkedList<Declaracion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DeclList",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SentList ::= Sentencia SentList 
            {
              LinkedList<Sentencia> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LinkedList<Sentencia> sl = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SentList",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SentList ::= Sentencia 
            {
              LinkedList<Sentencia> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new LinkedList<Sentencia>(); 
											   RESULT.add(s); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SentList",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaracion ::= Tipo ID IGUAL E0 SEMICOLON 
            {
              Declaracion RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Declaracion(t, id, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Int(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Bool(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= ARRAYOF NUM Tipo 
            {
              Tipo RESULT =null;
		Location tamxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location tamxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		int tam = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new ArrayOf(tam, tipo); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= Var IGUAL E0 SEMICOLON 
            {
              Sentencia RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		Expresion var = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Asignacion(var, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencia",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= IF E0 THEN Programa DONE 
            {
              Sentencia RESULT =null;
		Location condxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location condxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location codeifxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location codeifxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Programa codeif = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new IfThenElse(cond, codeif, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencia",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= IF E0 THEN Programa ELSE Programa DONE 
            {
              Sentencia RESULT =null;
		Location condxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).xleft;
		Location condxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).xright;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Location codeifxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location codeifxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		Programa codeif = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location codeelsexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location codeelsexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Programa codeelse = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new IfThenElse(cond, codeif, codeelse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencia",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= CONSIDERING Var CHOOSE Casos CHOSEN 
            {
              Sentencia RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		Expresion var = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location casosxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location casosxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Hashtable<Integer,Programa> casos = (Hashtable<Integer,Programa>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Choose(var, casos); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencia",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= WHILE E0 DO Programa DONE 
            {
              Sentencia RESULT =null;
		Location condxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location condxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location codexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location codexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Programa code = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new While(cond, code); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencia",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencia ::= CALL ID WITH Vars RECEIVING Vars SEMICOLON 
            {
              Sentencia RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Location entradaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location entradaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		LinkedList<Expresion> entrada = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location salidaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location salidaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		LinkedList<Expresion> salida = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Call(id, entrada, salida); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Sentencia",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Casos ::= VALUE NUM DO Programa DONE Casos 
            {
              Hashtable<Integer,Programa> RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location casosxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location casosxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Hashtable<Integer,Programa> casos = (Hashtable<Integer,Programa>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 casos.put(num,p); RESULT = casos; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Casos",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Casos ::= VALUE NUM DO Programa DONE 
            {
              Hashtable<Integer,Programa> RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new Hashtable<Integer,Programa>();
												   RESULT.put(num,p); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Casos",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Vars ::= Var COMA Vars 
            {
              LinkedList<Expresion> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location vlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location vlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LinkedList<Expresion> vl = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 vl.add(v); 
												   RESULT = vl; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Vars",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Vars ::= Var 
            {
              LinkedList<Expresion> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new LinkedList<Expresion>(); 
				 								   RESULT.add(v); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Vars",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Var ::= ID 
            {
              Expresion RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Var",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Var ::= Var AT E8 
            {
              Expresion RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion var = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AccessAt(var,e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Var",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Array ::= Elem COMA Array 
            {
              LinkedList<Expresion> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location arrayxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location arrayxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LinkedList<Expresion> array = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 array.add(e); 
												   RESULT = array; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Array",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Array ::= Elem 
            {
              LinkedList<Expresion> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new LinkedList<Expresion>(); 
				 								   RESULT.add(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Array",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Elem ::= NUM 
            {
              Expresion RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Number(num); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Elem",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Elem ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = new True(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Elem",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Elem ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = new False(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Elem",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Elem ::= LLAVEA Array LLAVEC 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		LinkedList<Expresion> e = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ArrayWithKeys(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Elem",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E0 ::= ALL NUM TO E0 
            {
              Expresion RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new AllTo(e, num); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E0 ::= E1 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E0 ::= LLAVEA Array LLAVEC 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		LinkedList<Expresion> e = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ArrayWithKeys(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E1 ::= E1 OR E2 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Or(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E2 ::= E2 AND E3 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E3 ::= NOT E3 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E4 ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = new True(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E4 ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = new False(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E4 ::= E5 EQ E5 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Equal(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E4 ::= E5 NEQ E5 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new NotEqual(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E4 ::= E5 LT E5 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new LowerThan(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E4 ::= E5 GT E5 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new GreaterThan(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E4 ::= E5 LE E5 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new LowerOrEqual(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E4 ::= E5 GE E5 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new GreaterOrEqual(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E5 ::= E5 MAS E6 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Suma(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E5 ::= E5 MENOS E6 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Resta(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E6 ::= E6 DIV E7 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Div(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E7 ::= E7 POR E8 
            {
              Expresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Mult(e1,e2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E8 ::= NUM 
            {
              Expresion RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		int num = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Number(num); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E8 ::= Var 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E8 ::= PAP E0 PCIERRE 
            {
              Expresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E8",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

